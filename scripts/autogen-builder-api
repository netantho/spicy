#! /usr/bin/env bash
#
# Auto-generates `{hilti,spicy}/toolchain/include/ast/builder/node-factory.autogen.h`.
#
# This is a helper script that generates a bunch of simple forwarding methods
# that would be tedious to create by hand as a whole. Not sure yet if this is
# some we want to keep long-term. Alternatively, we could just use the initial
# output as a starting point that we then maintain by hand.
#
# Note that this does not run automatically, it needs to be run manually when
# some of the input files change.

function add_namespace {
    gsed -E "s/([ (])$1/\\1$2::$1/g"
}

function process_headers {
    output=$1
    headers="$2"

    cat <<EOF >"${output}"
// DO NOT EDIT. This file is automatically generated by $0."
EOF

        # cat /Users/robin/work/spicy/node-rewrite/hilti/toolchain/include/hilti/ast/builder/node-factory.autogen.h.tmp \
    find ${headers} -name '*.h' -type f -not -name 'all.h' \
        | xargs -t -n 1 -P $(nproc) "${bin}" -p "${db}" \
        | add_namespace "Linkage" "declaration" \
        | add_namespace "Flavor" "type::function" \
        | add_namespace "function::Flavor" "type" \
        | add_namespace "Case" "statement::switch_" \
        | add_namespace "switch_::Cases" "statement" \
        | add_namespace "Kind" "expression::keyword" \
        | add_namespace "keyword::Kind" "expression" \
        | add_namespace "tuple::Elements" "ctor" \
        | add_namespace "map::Elements" "ctor" \
        | add_namespace "Fields" "type::struct_" \
        | add_namespace "struct_::Fields" "ctor" \
        | add_namespace "try_::Catches" "statement" \
        | add_namespace "enum_::Labels" "type" \
        | add_namespace "comment::Separator" "statement" \
        | add_namespace "assert::Exception" "statement" \
        | add_namespace "AnonymousStruct" "type::Struct" \
        | add_namespace "AnonymousUnion" "type::Union" \
        | add_namespace "switch_::Default" "statement" \
        | add_namespace "operand_list::Operand" "type" \
        | add_namespace "Wildcard" "type" \
        | sort | uniq >"${output}"
}

if [ $# != 1 -a $# != 2 ]; then
    echo "usage: $0 <build-directory> [<compile-db>]"
    exit 1
fi

build=$1
base=$(cd "$(dirname $0)/.." && pwd)
bin=${build}/bin/autogen-builder-api
db=$2

output_hilti="${base}/hilti/toolchain/include/ast/builder/node-factory.autogen.h"
headers_hilti="\
    ${base}/hilti/toolchain/include/hilti/ast/attribute.h \
    ${base}/hilti/toolchain/include/hilti/ast/attribute.h \
    ${base}/hilti/toolchain/include/hilti/ast/ctors \
    ${base}/hilti/toolchain/include/hilti/ast/declarations \
    ${base}/hilti/toolchain/include/hilti/ast/expressions \
    ${base}/hilti/toolchain/include/hilti/ast/function.h \
    ${base}/hilti/toolchain/include/hilti/ast/function.h \
    ${base}/hilti/toolchain/include/hilti/ast/operator.h \
    ${base}/hilti/toolchain/include/hilti/ast/statements \
    ${base}/hilti/toolchain/include/hilti/ast/type.h \
    ${base}/hilti/toolchain/include/hilti/ast/types \
"

output_spicy="${base}/spicy/toolchain/include/ast/builder/node-factory.autogen.h"
headers_spicy="\
    ${base}/spicy/toolchain/include/spicy/ast/engine.h
    ${base}/spicy/toolchain/include/spicy/ast/types/all.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-item.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit.h
    ${base}/spicy/toolchain/include/spicy/ast/types/sink.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/all.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/field.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/unit-hook.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/variable.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/sink.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/property.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/switch.h
    ${base}/spicy/toolchain/include/spicy/ast/types/unit-items/unresolved-field.h
    ${base}/spicy/toolchain/include/spicy/ast/operators/all.h
    ${base}/spicy/toolchain/include/spicy/ast/operators/unit.h
    ${base}/spicy/toolchain/include/spicy/ast/operators/unit.cc
    ${base}/spicy/toolchain/include/spicy/ast/operators/sink.h
    ${base}/spicy/toolchain/include/spicy/ast/types.h
    ${base}/spicy/toolchain/include/spicy/ast/all.h
    ${base}/spicy/toolchain/include/spicy/ast/ctors/all.h
    ${base}/spicy/toolchain/include/spicy/ast/ctors/unit.h
    ${base}/spicy/toolchain/include/spicy/ast/hook.h
    ${base}/spicy/toolchain/include/spicy/ast/visitor-dispatcher.h
    ${base}/spicy/toolchain/include/spicy/ast/declarations/all.h
    ${base}/spicy/toolchain/include/spicy/ast/declarations/unit-hook.h
    ${base}/spicy/toolchain/include/spicy/ast/visitor.h
    ${base}/spicy/toolchain/include/spicy/ast/statements/stop.h
    ${base}/spicy/toolchain/include/spicy/ast/statements/reject.h
    ${base}/spicy/toolchain/include/spicy/ast/statements/all.h
    ${base}/spicy/toolchain/include/spicy/ast/statements/confirm.h
    ${base}/spicy/toolchain/include/spicy/ast/statements/print.h
    ${base}/spicy/toolchain/include/spicy/ast/detail/visitor.h
    ${base}/spicy/toolchain/include/spicy/ast/nodes.decl
    ${base}/spicy/toolchain/include/spicy/ast/aliases.h
    ${base}/spicy/toolchain/include/spicy/ast/expressions/all.h
    ${base}/spicy/toolchain/include/spicy/ast/builder/builder.h
    ${base}/spicy/toolchain/include/spicy/ast/builder/node-factory.autogen.h
    ${base}/spicy/toolchain/include/spicy/ast/builder/node-factory.h
    ${base}/spicy/toolchain/include/spicy/ast/forward.h
"

if [ -z "${db}" ]; then
    db="${build}/compile_commands.json"
fi

if [ ! -x "${bin}" ]; then
    echo "error: cannot find builder API binary at ${bin}"
    exit 1
fi

if [ ! -f "${db}" ]; then
    echo "error: cannot find compile database at ${db}"
    exit 1
fi

#process_headers "${output_hilti}" "${headers_hilti}"
process_headers "${output_spicy}" "${headers_spicy}"
